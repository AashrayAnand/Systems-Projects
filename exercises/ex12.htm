<!DOCTYPE html>
<!-- saved from url=(0083)https://courses.cs.washington.edu/courses/cse333/19su/assignments/exercises/12.html -->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="http://ogp.me/ns/fb#"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta property="og:image" content="https://courses.cs.washington.edu/courses/cse333/19su/site/img/CSEWordmark_sm.png">

  <title>Exercise 12 - CSE 333</title>

  <link href="./ex12_files/css" rel="stylesheet" type="text/css">
  <link href="./ex12_files/css(1)" rel="stylesheet" type="text/css">


  <link href="./ex12_files/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="./ex12_files/main.css">
</head>

<body>
  <header class="site-header"><!--
This is the navbar html which should appear on all pages.
It should be loaded into every page header using javascript.
Edit this file with your course title, number, year and quarter, URL, and 
customize your menu headings.
For details see: https://getbootstrap.com/docs/3.3/components/#navbar
-->
<div class="navbar navbar-inverse navbar-fixed-top cse333-navbar">
  <div class="container-fluid cse333-navbar-content">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="https://courses.cs.washington.edu/courses/cse333/19su/">CSE 333: Systems Programming</a>
    </div>
    <div class="collapse navbar-collapse">
        <nav>
      <ul class="nav navbar-nav">
        <li class="">
          <a href="https://courses.cs.washington.edu/courses/cse333/19su/">Home</a>
        </li>
        <li>
          <a href="https://courses.cs.washington.edu/courses/cse333/19su/calendar">Calendar</a>
        </li>
        <li class="active">
          <a href="https://courses.cs.washington.edu/courses/cse333/19su/assignments">Assignments</a>
        </li>
        <li>
          <a href="https://courses.cs.washington.edu/courses/cse333/19su/exams">Exams</a>
        </li>
        <li>
          <a href="https://piazza.com/class/jx2gmci8lr15ti"><span class="glyphicon glyphicon-new-window link-icon"></span>Message Board</a>
        </li>
      </ul>
        </nav>
      <ul class="nav navbar-nav navbar-right hidden-xs hidden-sm">
        <li><a>19su</a></li>
      </ul>
    </div><!-- /.nav-collapse -->
  </div><!-- /.container -->
</div><!-- /.navbar -->
</header>

  <div class="container">

    <!-- Begin page content -->

    <h1>CSE333 Exercise 12</h1>

    <p class="afterh">
    <b>Out:</b> &nbsp; Wednesday, July 31, 2019<br>
    <b>Due:</b> &nbsp; Monday, August 5, 2019 by <span class="red-text">10:30 am</span>
    </p>

    <section id="goals"><br>
      <div class="panel panel-default">
          <div class="panel-heading"><h3>Goals</h3></div>
          <div class="panel-body">
              <ul>
                  <li>Debug memory errors in C++</li>
                  <li>Practice using smart pointers</li>
                  <li>Maintain/improve code that was written by somebody else</li>
              </ul>
          </div>
      </div>
      </section>
  
  
      <div class="unspacepanel"></div>
  
  
      <section id="descr"><br>
      <div class="panel panel-default">
          <div class="panel-heading"><h3>Leaky Skip List</h3></div>
          <div class="panel-body">
  
    <p>You are given a <em>working</em> implementation of a templated container that uses
       a new data structure to implement "multiset" functionality. Start by downloading a
       copy of the following files (right click on the link if needed):
    </p>
  
    <ul>
      <li><a class="external" href="https://courses.cs.washington.edu/courses/cse333/19su/assignments/exercises/code/ex12/ex12.cc">
          <button type="button" class="btn btn-default btn-sm link-button">
          <img class="link-icon" src="./ex12_files/icon_cplusplus.png"> ex12.cc</button></a></li>
      <li><a class="external" href="https://courses.cs.washington.edu/courses/cse333/19su/assignments/exercises/code/ex12/SkipList.cc">
          <button type="button" class="btn btn-default btn-sm link-button">
          <img class="link-icon" src="./ex12_files/icon_cplusplus.png"> SkipList.cc</button></a></li>
      <li><a class="external" href="https://courses.cs.washington.edu/courses/cse333/19su/assignments/exercises/code/ex12/SkipList.h">
          <button type="button" class="btn btn-default btn-sm link-button">
          <img class="link-icon" src="./ex12_files/icon_cplusplus.png"> SkipList.h</button></a></li>
      <li><a class="external" href="https://courses.cs.washington.edu/courses/cse333/19su/assignments/exercises/code/ex12/Makefile">
          <button type="button" class="btn btn-default btn-sm link-button">
          <img class="link-icon" src="./ex12_files/icon_txt.png"> Makefile</button></a></li>
    </ul>
  
    <p><code>SkipList.cc</code> and <code>SkipList.h</code> contain the implementation
       of a <a class="external" href="https://en.wikipedia.org/wiki/Skip_list">skip list</a>,
       and <code>ex12.cc</code> contains some basic tests. This skip list is wicked fast (faster,
       in fact, than <code>std::multiset</code>!).  Sadly, this performance comes from the fact
       that there currently is no memory cleanup whatsoever.
    </p>
  
    <p>Your job is to modify <code>SkipList.cc</code> and <code>SkipList.h</code> with
       smart pointers <em>so that the default destructor cleans up all allocated memory
       </em>, rather than having to reason out a complicated traversal algorithm that
       runs in the destructor and frees everything exactly once. A significant challenge
       in doing so is looking at it from a design perspective and figuring out a way to
       apply smart pointers to achieve the desired result. A diagram of the memory layout
       is provided below to help you get started.
    </p>
  
    <ul>
      <li>You are <b>not</b> required to become an expert in skip lists or modify
       the <em>logic</em> of skip list traversal in order to solve this exercise.
      </li><li>You will,
       however, have to make some modifications to <code>SkipList.h</code> and the helper
       functions <code>SkipList::traverse</code> and <code>SkipList::clear</code> in order
       to implement your new smart pointer design.
    </li></ul>
  
    <p align="center"><img src="./ex12_files/skiplist-diagram.png" style="width: 75%"></p>
  
  
    <p><b>Hint:</b> One way to think of a skip list is as a two-dimensional generalization
       of a doubly linked list. Where linked list nodes have "next" and "prev" pointers,
       skip list nodes instead have "up", "down", "left", and "right". Look at the way we
       handled non-cyclic linked lists in lecture, and see if you can apply a modified
       version of the same strategy.
    </p>
  
    <p><b>Note:</b> You can ignore any <code>cpplint.py</code> warnings about
       (1) using rand_r(...) instead of rand(...), and
       (2) not <code>#include</code>'ing ".cc" files
    </p>
          </div>
      </div>
      </section>
  
  
      <div class="unspacepanel"></div>
  
  
      <section id="submit"><br>
        <div class="panel panel-default">
            <div class="panel-heading"><h3>Submission</h3></div>
            <div class="panel-body">
    
      <p><b>You only need to submit your modified versions of the two files: <code>SkipList.cc</code> and <code>SkipList.h</code></b></p>
  
      <p>Your code must:
      </p><ul>
      
      <li>Compile with no warnings using the provided Makefile.</li>
    
        <li> Have a comment at the top of your source file with your name,
        student number, and CSE or UW email address</li>
    
        <li> Have no crashes, memory leaks, or memory errors on CSE linux machines</li>
     
        <li>Follow the style guidelines we covered in class, including
        naming conventions for classes, methods, and instance variables;
    proper use of const; and  appropriate comments. 
    If in doubt, follow the Google C++ style guide, 
    and <a href="https://courses.cs.washington.edu/courses/cse333/19su/assignments/exercises/code/cpplint.py">cpplint.py</a> may be helpful in flagging potential
    style problems.  (You can ignore cpplint complaints about using-directives and
    about header guards that do not contain full file paths names.)</li>
        
    <li> Be pretty: the formatting, modularization, variable and
        function names, and so on must make us smile rather than cry.</li>
      <li> Be robust: you should think about handling bogus input
        from the user, and you should handle hard-to-handle cases
        (if there are any) gracefully</li>
      </ul>

      <p>
        Submit your code on <a class="external" href="https://www.gradescope.com/"><button type="button" class="btn btn-default btn-xs link-button"><img class="link-icon" src="./ex12_files/icon_gradescope.png"> Gradescope</button></a>
       </p>
    
        </div>
      </div>
    </section>

  <!-- End page content -->

  </div>

  <footer class="site-footer"><!-- Insert the same footer on all pages -->
<div class="cse-wordmark"><img src="./ex12_files/CSEWordmark_sm.png" alt="CSE Wordmark"></div>
<div class="site-footer-right">
    <a href="https://www.washington.edu/online/terms/">UW Site Use Agreement</a>
</div>    
</footer>

  <script src="./ex12_files/jquery.min.js"></script>
  <script src="./ex12_files/bootstrap.min.js"></script>
  <script src="./ex12_files/nav-bar.js"></script>
  <script src="./ex12_files/footer.js"></script>


</body></html>