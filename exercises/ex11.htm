<!DOCTYPE html>
<!-- saved from url=(0083)https://courses.cs.washington.edu/courses/cse333/19su/assignments/exercises/11.html -->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="http://ogp.me/ns/fb#"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta property="og:image" content="https://courses.cs.washington.edu/courses/cse333/19su/site/img/CSEWordmark_sm.png">

  <title>Exercise 11 - CSE 333</title>

  <link href="./ex11_files/css" rel="stylesheet" type="text/css">
  <link href="./ex11_files/css(1)" rel="stylesheet" type="text/css">


  <link href="./ex11_files/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="./ex11_files/main.css">
</head>

<body>
  <header class="site-header"><!--
This is the navbar html which should appear on all pages.
It should be loaded into every page header using javascript.
Edit this file with your course title, number, year and quarter, URL, and 
customize your menu headings.
For details see: https://getbootstrap.com/docs/3.3/components/#navbar
-->
<div class="navbar navbar-inverse navbar-fixed-top cse333-navbar">
  <div class="container-fluid cse333-navbar-content">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="https://courses.cs.washington.edu/courses/cse333/19su/">CSE 333: Systems Programming</a>
    </div>
    <div class="collapse navbar-collapse">
        <nav>
      <ul class="nav navbar-nav">
        <li class="">
          <a href="https://courses.cs.washington.edu/courses/cse333/19su/">Home</a>
        </li>
        <li>
          <a href="https://courses.cs.washington.edu/courses/cse333/19su/calendar">Calendar</a>
        </li>
        <li class="active">
          <a href="https://courses.cs.washington.edu/courses/cse333/19su/assignments">Assignments</a>
        </li>
        <li>
          <a href="https://courses.cs.washington.edu/courses/cse333/19su/exams">Exams</a>
        </li>
        <li>
          <a href="https://piazza.com/class/jx2gmci8lr15ti"><span class="glyphicon glyphicon-new-window link-icon"></span>Message Board</a>
        </li>
      </ul>
        </nav>
      <ul class="nav navbar-nav navbar-right hidden-xs hidden-sm">
        <li><a>19su</a></li>
      </ul>
    </div><!-- /.nav-collapse -->
  </div><!-- /.container -->
</div><!-- /.navbar -->
</header>

  <div class="container">

    <!-- Begin page content -->

    <h1>CSE333 Exercise 11</h1>

    <p class="afterh">
    <b>Out:</b> &nbsp; Monday, July 29, 2019<br>
    <b>Due:</b> &nbsp; Wednesday, July 31, 2019 by <span class="red-text">10:30 am</span>
    </p>

    <section id="goals"><br>
      <div class="panel panel-default">
          <div class="panel-heading"><h3>Goals</h3></div>
          <div class="panel-body">
              <ul>
                  <li>Practice with C++ templates</li>
              </ul>
          </div>
      </div>
      </section>
  
  
      <div class="unspacepanel"></div>
  
  
      <section id="descr"><br>
      <div class="panel panel-default">
          <div class="panel-heading"><h3>Vector with Templates</h3></div>
          <div class="panel-body">
  
       <p>
       Write a C++ program that prompts the user to type in 10 doubles,
       reads those doubles into a <code>std::vector</code> of doubles,
       sorts the vector using <code>std::sort</code>,
       and then prints out the sorted vector.
       To gain additional practice with templates,
       you should factor out a helper function, called <code>ReadValue</code>, that uses templates to abstract away the type returned;
       i.e., it should have the following function prototype:
       </p><pre><code>template &lt;typename T&gt; T ReadValue(istream&amp; in);</code></pre>
  
       As well, <code>ReadValue</code> should detect conversion and EOF conditions,
       and in such cases, <code>exit(EXIT_FAILURE)</code> after printing out a
       helpful error message. We recommend the <code>.good()</code> member function of <code>istream</code> for this purpose: read the <code>istream </code> documentation <a href="http://www.cplusplus.com/reference/istream/istream/">here</a> to learn more.<br><br>
       <p>
  
       Altogether, your program should match the following transcript
       as closely as you can:
  
</p><pre><code><b>bash$</b> g++ -Wall -g -std=c++11 -o ex11 ex11.cc
<b>bash$</b> ./ex11
Input 10 doubles:
5.0
3.33
4.4
10.1
10.6 
-10.5
3
5.0
12
1.441
Your sorted doubles are:
-10.5
1.441
3
3.33
4.4
5
5
10.1
10.6
12
<b>bash$</b></code></pre>
    <p>
  
          </p></div>
      </div>
      </section>
  
      <section id="submit"><br>
      <div class="panel panel-default">
          <div class="panel-heading"><h3>Submission</h3></div>
          <div class="panel-body">
  
    <p><b>You will submit a single file: <code>ex11.cc</code></b></p>

    <p>Your code must:
    </p><ul>
    
    <li>Compile with no warnings using the command above.</li>
  
      <li> Have a comment at the top of your source file with your name,
      student number, and CSE or UW email address</li>
  
      <li> Have no crashes, memory leaks, or memory errors on CSE linux machines</li>
   
      <li>Follow the style guidelines we covered in class, including
      naming conventions for classes, methods, and instance variables;
  proper use of const; and  appropriate comments. 
  If in doubt, follow the Google C++ style guide, 
  and <a href="https://courses.cs.washington.edu/courses/cse333/19su/assignments/exercises/code/cpplint.py">cpplint.py</a> may be helpful in flagging potential
  style problems.  (You can ignore cpplint complaints about using-directives and
  about header guards that do not contain full file paths names.)</li>
      
  <li> Be pretty: the formatting, modularization, variable and
      function names, and so on must make us smile rather than cry.</li>
    <li> Be robust: you should think about handling bogus input
      from the user, and you should handle hard-to-handle cases
      (if there are any) gracefully</li>
    </ul>
  
      </div>
    </div>
  </section>

  <!-- End page content -->

  </div>

  <footer class="site-footer"><!-- Insert the same footer on all pages -->
<div class="cse-wordmark"><img src="./ex11_files/CSEWordmark_sm.png" alt="CSE Wordmark"></div>
<div class="site-footer-right">
    <a href="https://www.washington.edu/online/terms/">UW Site Use Agreement</a>
</div>    
</footer>

  <script src="./ex11_files/jquery.min.js"></script>
  <script src="./ex11_files/bootstrap.min.js"></script>
  <script src="./ex11_files/nav-bar.js"></script>
  <script src="./ex11_files/footer.js"></script>


</body></html>